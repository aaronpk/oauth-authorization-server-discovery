



OAuth Working Group                                           A. Parecki
Internet-Draft                                                      Okta
Intended status: Standards Track                          B. M. Schwartz
Expires: 19 May 2023                                              Google
                                                        15 November 2022


                OAuth 2.0 Authorization Server Discovery
          draft-parecki-authorization-server-discovery-latest

Abstract

   This specification enables configuration of an OAuth client by
   providing the client with only the location of a resource server, by
   providing a mechanism for a resource server to indicate which
   authorization server it uses.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://aaronpk.github.io/oauth-authorization-server-discovery/draft-
   parecki-authorization-server-discovery.html.  Status information for
   this document may be found at https://datatracker.ietf.org/doc/draft-
   parecki-authorization-server-discovery/.

   Source for this draft and an issue tracker can be found at
   https://github.com/aaronpk/oauth-authorization-server-discovery.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 19 May 2023.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Usage and Applicability
   2.  Conventions and Definitions
     2.1.  Terminology
   3.  Protocol Overview
   4.  WWW-Authenticate Response
   5.  Client Identifier and Client Authentication
   6.  Security Considerations
     6.1.  Server-Side Request Forgery (SSRF)
     6.2.  Phishing
     6.3.  Changed Issuer
     6.4.  TODO ...
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   In order to obtain an access token to access a resource server, an
   OAuth 2.0 client needs to know the authorization server to use for
   the request.  OAuth 2.0 ([RFC6749]) does not provide any mechanisms
   for authorization server discovery, and other OAuth 2.0 extensions
   have left authorization server discovery out of scope as well.

   This specification provides a mechanism for a resource server to
   indicate which authorization server it accepts access tokens from, so
   that an OAuth client can be configured with only the location of the
   resource server.

   For example, an email client could provide an interface for a user to
   enter the URL of their JMAP server.  The email client would make a
   request to the server to discover the authorization server, then
   initiate an OAuth authorization flow to obtain tokens.

   This specification extends the WWW-Authenticate response header
   defined by OAuth 2.0 Bearer Token Usage ([RFC6750]) to include the
   issuer URI (defined in OAuth 2.0 Authorization Server Metadata
   [RFC8414]) of the authorization server.

1.1.  Usage and Applicability

   TODO: Clarify the scope of this extension, e.g. that it is intended
   only for use when it is not possible to pre-configure a client to
   know about both the AS and RS.  Reference the Security Considerations
   section for more details about the dangers of RS-driven discovery.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.1.  Terminology

   This specification uses the terms "Access Token", "Authorization
   Code", "Authorization Endpoint", "Authorization Server", "Client",
   "Client Authentication", "Client Identifier", "Client Secret", "Grant
   Type", "Protected Resource", "Redirection URI", "Refresh Token",
   "Resource Owner", "Resource Server", "Response Type", and "Token
   Endpoint" defined by [RFC6749], as well as "Issuer", and "Issuer
   Identifier" defined by [RFC8414].

3.  Protocol Overview

   The following is a typical end-to-end flow implemented according to
   the specification.  Note that while this example uses the OAuth 2.0
   Authorization Code flow, a similar sequence could also be implemented
   with any other OAuth flow as well.

  +----------+                                          +--------------+
  |          |                                          |              |
  |          |-------(1) resource request-------------->|              |
  |          |                                          |              |
  |          |<--(2) authorization server issuer--------|   Resource   |
  |          |                                          |    Server    |
  |  Client  |                                          |              |
  |          |-------(7) resource request ------------->|              |
  |          |                                          |              |
  |          |<-----(8) protected resource -------------|              |
  |          |                                          +--------------+
  |          |
  |          |
  |          |                                         +---------------+
  |          |-------(3) AS metadata request---------->|               |
  |          |                                         |               |
  |          |<-----(4) AS metadata response-----------|               |
  |          |                                         |               |
  |          |  +-------+                              |               |
  |          |->|       |                              |               |
  |          |  |       |--(5) authorization request-->|               |
  |          |  | User  |                              |               |
  |          |  | Agent |<-----------[...]------------>| Authorization |
  |          |  |       |                              |     Server    |
  |          |<-|       |                              |               |
  |          |  +-------+                              |               |
  |          |                                         |               |
  |          |<-------- (6) access token --------------|               |
  |          |                                         |               |
  +----------+                                         +---------------+

   1.  The client makes a request to a protected resource without
       presenting an access token.

   2.  The resource server responds with the WWW-Authenticate header
       including the issuer URI of the authorization server.

   3.  The client builds the authorization server metadata URL from the
       provided issuer identifier according to [RFC8414], and makes a
       request to fetch the authorization server metadata.

   4.  The authorization server responds with the metadata document
       according to [RFC8414].

   5.  The client directs the user agent to the authorization server to
       begin the authorization flow.

   6.  The authorization exchange is completed and the authorization
       server returns an access token to the client.

   7.  The client repeats the resource request from step 1, presenting
       the newly obtained access token.

   8.  The resource server returns the requested protected resource.

4.  WWW-Authenticate Response

   This specification introduces a new parameter in the WWW-Authenticate
   response to indicate the issuer URI of the authorization server:

   issuer  The issuer identifier of the authorization server.

   The response below is an example of a WWW-Authenticate header that
   includes the issuer URL.

   HTTP/1.1 401 Unauthorized
   WWW-Authenticate: Bearer error="invalid_request",
     error_description="No access token was provided in this request",
     issuer="https://as.example.com/"

   The HTTP status code and error string in the response are defined by
   [RFC6750].

   The issuer parameter MAY be combined with other parameters defined in
   other extensions, such as the max_age parameter defined by
   [I-D.ietf-oauth-step-up-authn-challenge].

5.  Client Identifier and Client Authentication

   The way in which the client identifier is established at the
   authorization server is out of scope of this specification.

   Because this specification is intended to be deployed in scenarios
   where clients are previously unknown to authorization servers, using
   pre-registered client identifiers is likely to be impractical.

   There are some existing methods by which this could be accomplished,
   such as using Dynamic Client Registration [RFC7591] to register the
   client at the authorization server prior to initiating the
   authorization flow.  Other extensions may define alternatives, such
   as using a URL to identify clients.

6.  Security Considerations

6.1.  Server-Side Request Forgery (SSRF)

   TODO

6.2.  Phishing

   TODO: Pre-configuration of the client is safer if possible, and this
   should only be used when pre-configuration is not possible.

6.3.  Changed Issuer

   TODO: What should a client do if it makes a request to a previously-
   seen RS and it provides a different AS than before?

6.4.  TODO ...

7.  IANA Considerations

   TBD

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6749>.

   [RFC6750]  Jones, M. and D. Hardt, "The OAuth 2.0 Authorization
              Framework: Bearer Token Usage", RFC 6750,
              DOI 10.17487/RFC6750, October 2012,
              <https://www.rfc-editor.org/rfc/rfc6750>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8414]  Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", RFC 8414,
              DOI 10.17487/RFC8414, June 2018,
              <https://www.rfc-editor.org/rfc/rfc8414>.

   [RFC9110]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Semantics", STD 97, RFC 9110,
              DOI 10.17487/RFC9110, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9110>.

8.2.  Informative References

   [I-D.ietf-oauth-step-up-authn-challenge]
              Bertocci, V. and B. Campbell, "OAuth 2.0 Step-up
              Authentication Challenge Protocol", Work in Progress,
              Internet-Draft, draft-ietf-oauth-step-up-authn-challenge-
              06, 6 November 2022,
              <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-
              step-up-authn-challenge-06>.

   [RFC7591]  Richer, J., Ed., Jones, M., Bradley, J., Machulak, M., and
              P. Hunt, "OAuth 2.0 Dynamic Client Registration Protocol",
              RFC 7591, DOI 10.17487/RFC7591, July 2015,
              <https://www.rfc-editor.org/rfc/rfc7591>.

   [RFC8707]  Campbell, B., Bradley, J., and H. Tschofenig, "Resource
              Indicators for OAuth 2.0", RFC 8707, DOI 10.17487/RFC8707,
              February 2020, <https://www.rfc-editor.org/rfc/rfc8707>.

Acknowledgments

   The editors of this draft would like to thank the attendees of the
   IETF 115 OAuth Working Group and HTTP API Working Group where this
   proposal was initially presented.  The editors would also like to
   thank....

Authors' Addresses

   Aaron Parecki
   Okta
   Email: aaron@parecki.com


   Benjamin M. Schwartz
   Google
   Email: bemasc@google.com
